###

0. @1x  @2x  @3x

@1x 为非retina屏的iphone。iphone4以前，不包含4的手机需要使用这个标示。

@2x 为retina屏的iphone准备。iphone4/4s/5/5c/5s/6 使用该标示，最常用

@3x 专为iphone6p准备。iphone6 plus使用该标示。比较常用


1.  Realm
Realm是由Y Combinator公司孵化出来的一款可以用于iOS(同样适用于Swift&Objective-C)和Android的跨平台移动数据库。目前最新版是Realm 2.0.2，支持的平台包括Java，Objective-C，Swift，React Native，Xamarin。


Realm官网上说了好多优点，我觉得选用Realm的最吸引人的优点就三点：

跨平台：现在很多应用都是要兼顾iOS和Android两个平台同时开发。如果两个平台都能使用相同的数据库，那就不用考虑内部数据的架构不同，使用Realm提供的API，可以使数据持久化层在两个平台上无差异化的转换。
简单易用：Core Data 和 SQLite 冗余、繁杂的知识和代码足以吓退绝大多数刚入门的开发者，而换用 Realm，则可以极大地减少学习成本，立即学会本地化存储的方法。毫不吹嘘的说，把官方最新文档完整看一遍，就完全可以上手开发了。
可视化：Realm 还提供了一个轻量级的数据库查看工具，在Mac Appstore 可以下载“Realm Browser”这个工具，开发者可以查看数据库当中的内容，执行简单的插入和删除数据的操作。毕竟，很多时候，开发者使用数据库的理由是因为要提供一些所谓的“知识库”。


2.  RMDB

FMDB是iOS平台的SQLite数据库的框架
FMDB是以OC的形式封装了SQLite的C语言框架。

二、FMDB的优点

1、使用起来更加面向对象，省去了很多麻烦，冗余的C语言代码。

2、对比苹果自带的COreData框架，更加轻便灵活。

3、提供了多线程数据库操作安全，有效防止数据换乱。


FMDatebaseQueue:用于在多线程中执行多个查询或者更新，它是线程安全的。（因为这个类中自带一个FMDatabase对象，所有初始化次对象的时候会自动生成一个数据库对象，而且在想要拿到数据库对象执行更新，或者查询操作的时候，不需要从FMDatabaseQueue对象中取得FMdatabase对象，可以使用框架提供的方法：inDatabase:(^Block)方法，这个方法中带的Block中把数据库对象作为参数传进来了。




4. UITableView的数据源(dataSource)和代理(delegate)

UITableView需要一个数据源(dataSource)来显示数据，UITableView会向数据源查询一共有多少行数据以及每一行显示什么数据等。没有设置数据源的UITableView只是个空壳。凡是遵守UITableViewDataSource协议的OC对象，都可以是UITableView的数据源。

通常都要为UITableView设置代理对象(delegate)，以便在UITableView触发一下事件时做出相应的处理，比如选中了某一行。凡是遵守了UITableViewDelegate协议的OC对象，都可以是UITableView的代理对象。一般会让控制器充当UITableView的dataSource和delegate


5.  ios和安卓的区别

 1）优先级别不同：iOS最先响应屏幕
　　当使用iOS或者是Android手机时，第一步就是滑屏解锁找到相应程序点击进入。而这个时候往往是所有操控开始的第一步骤，iOS系统产品就表现出来了流畅的一面，但Android产品却给人一种卡顿的现象，更别说后续深入玩游戏或者进行其它操控了。这是为什么?
　　其实这与两个系统的优先级有关，iOS对屏幕反应的优先级是最高的，它的响应顺序依次为Touch–Media–Service–Core架构，换句话说当用户只要触摸接触了屏幕之后，系统就会最优先去处理屏幕显示也就是Touch这个层级，然后才是媒体(Media)，服务(Service)以及Core架构。而Android系统的优先级响应层级则是Application–Framework–Library–Kernal架构，和显示相关的图形图像处理这一部分属于Library，可以看
2）　　硬件工作配置不同：iOS基于GPU加速
　　目前智能手机硬件装备竞赛当中，其实处理器等配置已经达到了一个瓶颈期，各大旗舰产品在硬件比拼当中基本上没有太大的区别，而这时候GPU就成为了一个凸显差异的重要因素。一些大型软件像是3D游戏对GPU性能要求都会比较高，苹果iPhone产品采用的Power VR SGX系列GPU在当下来说非常的主流，跑分测试数据证明了它并不会比一些旗舰级别的Android产品差劲。
　　A6处理器集成了Power VR SGX543显示芯片
　　而iOS系统对图形的各种特效处理基本上正好都是基于GPU硬件进行加速的，它可以不用完全借助CPU或者程序本身，而是通过GPU进行渲染以达到更流畅的操控表现。但是Android系统产品则并非如此，因为Android需要适应不同的手机硬件，需要满足各种差异配置，所以很多图形特效大多都要靠程序本身进行加速和渲染，并严重依赖CPU运算的操作自然会加大处理器的负荷，从而出现卡顿的问题。虽然Android 4.0以及4.1等更高版本中进行了改进将硬件加速设为默认开启，但依旧无法做到所有特效全部都靠GPU进行加速。在很多Android手机里面都自带有“是否开启GPU渲染”这个功能选项，不过开启之后的改善也是微乎其微。
3）　开发机制不同：安卓机制效率低
　　Android的编程语言是JAVA，而iOS的则为Objective-C，不过要是说Android系统之所以有些卡顿是因为JAVA开发语言的关系，或者是拿它和Objective-C对比肯定会有人提出质疑。Objective-C的优势是效率高但比较“唯一”，而JAVA的优势则是跨平台不过运行效率相对偏低，其实这两个编程语言所带来的机制不同，就已经造成了各自系统之间的流畅性差异化。
    iOS的Objective-C，编译器gcc，而这个gcc编译出来的代码又被苹果专为iOS架构优化到了极致，运行过程中也不需要虚拟机在中间插手，执行效率自然很高–引自网络。这一段话应该是iOS系统本身运行程序的执行过程，而Android是通过JAVA虚拟机来执行，并且系统需要占用大量内存来换取执行速度，再加上不定期的内存自动回收机制，从而直接导致了卡顿现象的出现。


IOS与安卓的区别：
1、两者运行机制不同：IOS采用的是沙盒运行机制，安卓采用的是虚拟机运行机制。
2、两者后台制度不同：IOS中任何第三方程序都不能在后台运行；安卓中任何程序都能在后台运行，直到没有内存才会关闭。
3、IOS中用于UI指令权限最高，安卓中数据处理指令权限最高。
iphone沙盒机制解释：应用程序位于文件系统的严格限制部分，程序不能直接访问其他应用程序。以杀毒软件中的沙盒技术解释一下。“沙盒”技术是发现可疑行为后让程序继续运行，当发现的确是病毒时才会终止。“沙盒”技术的实践运用流程是：让疑似病毒文件的可疑行为在虚拟的“沙盒”里充分表演，“沙盒”会记下它的每一个动作；当疑似病毒充分暴露了其病毒属性后，“沙盒”就会执行“回滚”机制：将病毒的痕迹和动作抹去，恢复系统到正常状态。
安卓虚拟机机制解释：android本身不是为触摸屏打造的，所以所有的应用都是运行在一个虚拟的环境中，由底层传输数据到虚拟机中，再由虚拟机传递给用户UI，任何程序都就可以轻松访问其他程序文件。


6. 集合操作符  问KVO时，可能会问到

1） 简单集合操作符
 @avg 操作符将集合中属性键路径所指对象转换为 double, 计算其平均值，返回该平均值的 NSNumber 对象。当均值为 nil 的时候，返回 0.
@count 操作符返回集合中对象总数的 NSNumber 对象。操作符右边没有键路径。
@max 操作符比较由操作符右边的键路径指定的属性值，并返回比较结果的最大值。最大值由指定的键路径所指对象的 compare: 方法决定，因此参加比较的对象必须支持和另一个对象的比较。如果右侧键路径所指对象值为 nil， 则忽略，不影响比较结果。
@min 和 @max 一样，但是返回的是集合中的最小值。
@sum 返回右侧键路径指定的属性值的总和。每一个比较值都转换为 double，然后计算值的总和，最后返回总和值的 NSNumber 对象。如果右侧键路径所指对象值为 nil，则忽略。
[products valueForKeyPath:@"@count"]; // 7
[products valueForKeyPath:@"@sum.price"]; // 5632.00
[products valueForKeyPath:@"@avg.price"]; // 804.5714285714286
[products valueForKeyPath:@"@max.price"]; // 1699.00
[products valueForKeyPath:@"@min.launchedOn"]; // June 11, 2012

Pro提示：你可以简单的通过把 self 作为操作符后面的 key path 来获取一个由 NSNumber 组成的数组或者集合的总值，例如对于数组 @[@(1), @(2), @(3)] 可使用 valueForKeyPath:@"@max.self" 来获取最大值。

2）对象操作符

对象操作符包括 @distinctUnionOfObjects 和 @unionOfObjects, 返回一个由操作符右边的 key path 所指定的对象属性组成的数组。其中 @distinctUnionOfObjects 会对数组去重，而 @unionOfObjects 不会。

NSArray *unionOfObjects = [products valueForKeyPath:@"@unionOfObjects.name"]; // 1.
NSArray *distinctUnionObjects = [products valueForKeyPath:@"@distinctUnionOfObjects.name"];  //2.

unionOfObjects 中会包含 “iPhone5”, “iPhone5”,”iPhone5”, “iPad Mini”, “MacBook Pro”, “MacBook Pro”, “iMac”

distinctUnionObjects 中会包含 “iPhone5”, “iPad Mini”, “MacBook Pro”, “iMac”, 相当于对 unionOfObjects 数组进行去重处理。



7. 17-9-22 swift4马上出来
  此时在swift2.3 发现 按钮   addTarget(target, action: #selector(btnAction), forControlEvents: .TouchUpInside)   ,target  不能为nil， 否则在当前类里不会触发点击按钮的方法，
 1）若appdelegate里也写了和此类里一样的按钮点击时的方法，则只会调用本类里的，不会再调appdelegate里的了
 2） 只有当 target==nil,且appdelegate里也写了和此类里一样的按钮点击时的方法时，才会调用调appdelegate里的按钮点击方法---------------------   这是响应者链


8.  NSAutoreleasePool 是 Cocoa 用来支持引用计数内存管理机制的类, 当一个autorelease pool(自动释放池)被drain(销毁)的时候会对pool里的对象发送一条release的消息.
    注意 : 在ARC下, 不能使用NSAutoreleasePool这个类来创建自动释放池, 而应该用@autoreleasepool { } 这个block

    自动释放池什么时候释放？
    通过Observer监听RunLoop的状态，一旦监听到RunLoop即将进入睡眠等待状态，就释放自动释放池（kCFRunLoopBeforeWaiting）


什么是自动释放池：用来存储多个对象类型的指针变量
自动释放池对池内对象的作用：存入池内的对象，当自动释放池被销毁时，会对池内对象全部做一次release操作
对象如何加入池中：调用对象的autorelease方法
自动释放池能嵌套使用吗：能
多次调用对象的autorelease方法会导致：野指针异常
自动释放池的作用：将对象与自动释放池建立关系，池子内调用autorelease，在自动释放池销毁时销毁对象，延迟release销毁时间


系统判断对象是否销毁的依据：指向对象的强指针是否被销毁

野指针:指针变量没有进行初始化或指向的空间已经被释放
空指针 : 指针赋值为空,nil


    内存管理的原则
    只要还有人在使用这个对象, 那么这个对象就不会被回收
    只有你想使用这个对象, 那么就应该让这个对象的引用计数器加1
    当你不想使用这个对象时, 应该让对象的引用计数器减1
    谁创建, 就由谁来release
    如果你通过alloc, new, copy 来创建一个对象, 当你不想用这个对象的时候就必须调用release 或者autorelease 让引用计数器减1
    不是你创建的就不用你负责 release
    谁retain 谁release
    只要你调用了retain ,无论这个对象如何生成, 都需要调用release
    总结:
    有加就应该有减, 曾让某个计数器加1, 就应该让其在最后减1

swift里的, ,如果self在闭包被调用的时候可能为空,则用weak,反之亦然； 如果为空时使用了unowned,程序会崩溃,类似访问了悬挂指针

但是iOS不支持垃圾回收, ARC作为LLVM3.0编译器的一项特性, 在iOS5.0 (Xcode4) 版本后推出的。



常见的出现内存循环引用的场景有哪些？
定时器（NSTimer）：NSTimer经常会被作为某个类的成员变量，而NSTimer初始化时要指定self为target，容易造成循环引用（self->timer->self）。 另外，若timer一直处于validate的状态，则其引用计数将始终大于0，因此在不再使用定时器以后，应该先调用invalidate方法
block的使用：block在copy时都会对block内部用到的对象进行强引用(ARC)或者retainCount增1(非ARC)。在ARC与非ARC环境下对block使用不当都会引起循环引用问题， 一般表现为，某个类将block作为自己的属性变量，然后该类在block的方法体里面又使用了该类本身，简单说就是self.someBlock =Type var{[self dosomething];或者self.otherVar = XXX;或者_otherVar = …};出现循环的原因是：self->block->self或者self->block->_ivar（成员变量）
代理（delegate）：在委托问题上出现循环引用问题已经是老生常谈了，规避该问题的杀手锏也是简单到哭，一字诀：声明delegate时请用assign(MRC)或者weak(ARC)，千万别手贱玩一下retain或者strong，毕竟这基本逃不掉循环引用了！


对象添加到通知中心中，当通知中心发通知时，这个对象却已经被释放了，可能会出现什么问题？
其实这种只是考查对通知的简单应用。通知是多对多的关系，主要使用场景是跨模块传值。当某对象加入到通知中心后，若在对象被销毁前不将该对象从通知中心中移除，当发送通知时，就会造成崩溃。这是很常见的。所以，在添加到通知中心后，一定要在释放前移除。


怎么使用autorelease pool
由于@autoreleasepool同时兼容MRC和ARC编译环境(NSAutoreleasePool只能在MRC下使用), 所以以下均是以autorelease pool block来介绍使用.

什么时候需要自己手动创建autorelease pool?
你写的程序不是基于UI framework, 例如命令行项目
你写的循环创建了大量临时对象 -> 你需要在循环体内创建一个autorelease pool block并且在每次循环结束之前处理那些autoreleased对象. 在循环中使用autorelease pool block可以降低内存峰值
你创建了一个新线程
当线程开始执行的时候你必须立马创建一个autorelease pool block, 否则你的应用会造成内存泄露.
使用场景 :
利用@autoreleasepool优化循环, 
如果你的应用程序或者线程是要长期运行的并且有可能产生大量autoreleased对象, 你应该使用autorelease pool blocks
长期在后台中运行的任务, 方法
这里介绍一种特殊的情况

先上苹果官方源码
– (id)findMatchingObject:(id)anObject {
id match;
while (match == nil) {
@autoreleasepool {
// Do a search that creates a lot of temporary objects.
match = [self expensiveSearchForObject:anObject];
if (match != nil) {
[match retain]; / Keep match around. /
}
}
}
return [match autorelease]; / Let match go and return it. /
}

在block结束之后, 你要注意的是任何autoreleased对象已经被处理过了(release). 请不要对这个对象发送消息或者把这个对象当做方法的返回值返回. 会引发野指针错误.
解决方法 : 苹果是这么做的 : 在block内对match对象发送retain消息和在block外对match发送autorelease消息能延长match对象的生命周期并且允许match对象在block外部接收消息或者作为方法的返回值返回. 我们不需要再关心match什么时候释放, 因为它已经交给了上一层的autorelease pool去管理.




ARC下不显式指定任何属性关键字时，默认的关键字都有哪些？
对于基本数据类型默认关键字是：atomic,readwrite,assign
对于普通的Objective-C对象：atomic,readwrite,strong

NSAutoreleasePool对象不能retain, 不能autorelease, 所以drain方法(或者release方法, 但是这两者有所不同, 下文会说)可以直接释放内存. 你应该在同一个上下文(调用创建这个池的同一个方法, 函数或者循环体)中drain一个自动释放池.
MRC下需要对象调用autorelease才会入池, ARC下可以通过__autoreleasing修饰符, 否则的话看方法名, 非alloc/new/copy/mutableCopy开头的方法编译器都会自动帮我们调用autorelease方法.



autorelease pool 与 线程
每一个线程(包括主线程)都有一个NSAutoreleasePool栈. 当一个新的池子被创建的时候, push进栈. 当池子被释放内存时, pop出栈. 对象调用autorelease方法进入栈顶的池子中. 当线程结束的时候, 它会自动地销毁掉所有跟它有关联的池子.
autorelease pool 与 RunLoop
程序运行 -> 开启事件循环 -> 发生触摸事件 -> 创建自动释放池 -> 处理触摸事件 -> 事件对象加入自动释放池 -> 一次事件循环结束, 销毁自动释放池.


iOS是如何管理内存的？
我相信很多人的回答是内存管理的黄金法则，其实如果我是面试官，我想要的答案不是这样的。我希望的回答是工作中如何处理内存管理的。
参考答案：
Block内存管理：由于使用block很容易造成循环引用，因此一定要小心内存管理问题。最好在基类controller下重写dealloc，加一句打印日志，表示类可以得到释放。如果出现无打印信息，说明这个类一直得不到释放，表明很有可能是使用block的地方出现循环引用了。对于block中需要引用外部controller的属性或者成员变量时，一定要使用弱引用，特别是成员变量像_testId这样的，很多人都没有使用弱引用，导致内存得不到释放。
对于普通所创建的对象，因为现在都是ARC项目，所以记住内存管理的黄金法则就可以解决。
很多内置的类，如tableview的delegate的属性是assign不是retain？

tableview的代理一般都是它所属的控制器，控制器会对它内部的view进行一次retain操作，而tableview对代理控制器也进行一次retain操作，就会出现循环引用问题。


9.  打开 xx.app 显示包内容，  即可看到所有被缓存的cell，如TestCell.nib等等都在包里面，Assets.car是被加密过的

10.  nil：指向oc中对象的空指针， 所指对象未被初始化或已被释放
Nil：指向oc中类的空指针
NULL：指向其他类型的空指针，如一个c类型的内存指针
NSNull：在集合对象中，表示空值的对象

nil和NULL从字面意思来理解比较简单，nil是一个对象，而NULL是一个值，我的理解为nil是将对象设置为空，而NULL是将基本类型设置为空的。而且我们对于nil调用方法，不会产生crash或者抛出异常。

11. /** 运行时加载类或分类调用该方法, 每个类只会调用一次 */
+ (void)load {

}

/** 类实例化使用前需要先初始化, 一个类调用一次, 如果子类没有实现该方法则会调用父类方法 */
+ (void)initialize {

}

12. 创建新对象时，首先调用`alloc`为对象分配内存空间，再调用`init`初始化对象，如`[[NSObject alloc] init]`；而`new`方法先给新对象分配空间然后初始化对象，因此`[NSObject new]`等同于`[[NSObject alloc] init]`；关于`allocWithZone`方法，官方文档解释该方法的参数是被忽略的，正确的做法是传nil或者NULL参数给它。

13.  总结使用@class的好处和场合:

    1.在.h类的声明文件中,如果只是用了类的指针而没有使用类的方法和实例变量,可以使用@class代替#import,可以避免没必要的引用.
    2.使用#import来引入该类的话,首先需要编译该类,而使用@class不需要,他只是说明这是个类而已,不需要提前编译,提高了编译效率!
    3.但是如果使用了外部类的方法,则只能使用#import不能使用@class否则,编译器会找不到该方法
    4.对于循环依赖关系,只能使用@class:如A.h导入了B.h,B.h导入A.h这样一个头文件的编译需要等到对方编译才行,导致了编译错误,这时候只能使用@class!
    5.如果在定义一个类时,需要提前使用类来声明一个对象,那么就必须使用@class进行声明,以免导致编译错误;
    如果是  协议 同理,使用@protocol提前声明


14. socket、http、https
     1.建立连接时，需要三次握手，发送3个包。

        第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；
        第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；
        第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。

        三次握手(Three-way Handshake)即建立一个TCP连接时，需要客户端和服务器总共发送3个包。三次握手的目的是连接服务器指定端口，建立TCP连接,并同步连接双方的序列号和确认号并交换TCP 窗口大小信息。在socket编程中，客户端执行connect()时,将触发三次握手。

        握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。



    2. 断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”。
        TCP连接的拆除需要发送四个包，因此称为四次握手(four-way handshake)。在socket编程中，任何一方执行close()操作即可产生握手（有地方称为“挥手”）操作。


    3.    http、https的理解
    HTTPS（Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，是HTTP的安全版。 在HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此HTTP协议不适合传输一些敏感信息。

    https协议需要到ca申请证书；http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议；http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443；http的连接很简单，是无状态的，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议。

    4.  Socket连接与HTTP连接的不同
    通常情况下Socket连接就是TCP连接，因此Socket连接一旦建立，通信双方即可开始相互发送数据内容，直到双方连接断开。但在实际应用中，客户端到服务器之间的通信防火墙默认会关闭长时间处于非活跃状态的连接而导致 Socket 连接断连，因此需要通过轮询告诉网络，该连接处于活跃状态。

    而HTTP连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。

16. 并发是两个任务可以在重叠的时间段内启动，运行和完成。并行是任务在同一时间运行，例如，在多核处理器上。
并发是独立执行过程的组合，而并行是同时执行（可能相关的）计算。
并发是一次处理很多事情，并行是同时做很多事情。
应用程序可以是并发的，但不是并行的，这意味着它可以同时处理多个任务，但是没有两个任务在同一时刻执行。
应用程序可以是并行的，但不是并发的，这意味着它同时处理多核CPU中的任务的多个子任务。
一个应用程序可以即不是并行的，也不是并发的，这意味着它一次一个地处理所有任务。
应用程序可以即是并行的也是并发的，这意味着它同时在多核CPU中同时处理多个任务。
